#!/bin/bash

me=`readlink $0`
if [ "x${me}" == "x" ]
then
        me=$0
fi
curdir=`dirname ${me}`

source ${curdir}/utils_check_received
fix_half_series=1
fix_non_gre=1
fix_dones=1
fix_dups=1

log Starting ${me}

folder_list=
folder_list_prev=("${folder_list}")
flag_indicate_job_busy=0
# Working Loop
i=0
while [ 1 ]
do
	# Update configuration
	source ${curdir}/setup_config


	# Clean ${folder_pool}
	remove_nongre ${folder_pool}
	remove_halfs ${folder_pool}
	remove_dups_and_dones ${folder_pool}

	# Refresh job logbook
	logbook_refresh

	# Get list for completed folder
	get_completed_folder_list folder_list ${folder_pool}
	n_waitinglist=`echo ${folder_list} | wc -w`

	for each_folder in $folder_list
	do

		# Make sure no blocking from backup func.

		# Save condition flag 1 (working) to condition file
		echo "1" | cat > ${file_condition_QSM}

		# Check if the recon would be blocked (by auto backup)
		if [ -e ${file_block_QSM} ] && [ $(cat ${file_block_QSM}) -eq 1 ]
		then
			log "QSM recon blocked by auto backup function"
			break
		fi


		# ============ QSM ready to go ============ #
		# log "QSM ready!!"

		# Only prompt for newly found folder
		if [[ ! " ${folder_list_prev[@]} " =~ " ${each_folder} " ]]
		then
			log "New folder found: $(basename ${each_folder})"
		fi

		# # Determine if we need to assign a new job for this folder
		# tmp=`logbook_check_job $(basename ${each_folder})`
		# if [ ! "x${tmp}" == "x" ]
		# then		
		# 	# Another job is working on this
		# 	# Ignore this folder
		# 	log "A job is working on this."
		# 	continue
		# fi

		# Determine if a job could be assigned
		determine_job num_job type_job type_agent ${each_folder}
		if [ "x${type_job}" == "x" ]
		then
			# No job could be created (all jobs/agents busy)
			# Should go for next round (sleeping)
			if [ ${flag_indicate_job_busy} -eq 0 ]
			then
				log "All jobs/agents busy"
				flag_indicate_job_busy=1
			fi

			# Wait a moment
			sleep 5
			break

		elif [ "${type_agent}" == "remote" ] && [ ${n_waitinglist} -lt ${n_min_waitinglist} ]
		then
			# No job (remote agent) should be created when waiting list is shorter than ${n_min_waitinglist}

			# Even if not all jobs are busy
			flag_indicate_job_busy=0

			# Wait a moment
			sleep 5
			break

		else
			# A job could be created
			flag_indicate_job_busy=0

			# Decrease waitling list
			n_waitinglist=$[${n_waitinglist} - 1]
		fi

		# Assign new job
		logbook_add_job ${num_job} ${type_job} ${type_agent} $(basename ${each_folder})
		log "Job ${num_job} (${type_job}:${type_agent}) is assigned"

		# ${ASSIGN_JOB} ${each_folder} ${type_job} ${num_job}
		# screen -dm ${ASSIGN_JOB} ${num_job} ${type_job} ${type_agent} ${each_folder}
		${ASSIGN_JOB} ${num_job} ${type_job} ${type_agent} ${each_folder} &

		# Wait a moment
		sleep 5
			
	done

	# Write the folder list
	folder_list_prev=("${folder_list}")

	# It could only come here when:
	#	1) no folders waiting
	# or
	#	2) all jobs busy

	if [ "x" = "x${folder_list}" ]
	then
		# No folders waiting

		# Save condition flag 0 (idle) to condition file
		echo "0" | cat > ${file_condition_QSM}		

		#echo "Empty folder list. Sleeping"
		sleep ${period_recon}
		i=$[$i + 1]
		if [ $i -ge 60 ]
		then
			log "Idle"
			i=0
		fi
	else
		# All jobs busy

		# Just go to the next round
		i=0
	fi

done
