#!/bin/bash

# Check if there is enough space left in the archive disk.
# If not, backup all exam files to external drive

me=`readlink $0`
if [ "x${me}" == "x" ]
then
        me=$0
fi
curdir=`dirname ${me}`

source ${curdir}/utils_basic


release_block()
{
	echo "0" | cat > ${file_block_QSM}
}

set_block()
{
	echo "1" | cat > ${file_block_QSM}	
}


try_block()
{
	# Check status of QSM recon
	! is_idle && return 1

	# QSM recon is idle
	# Block the recon
	set_block

	# Check status of QSM recon, again
	# If block fails, release the block
	! is_idle && release_block && return 1

	# Block succeeds
	return 0
}



# Work loop
release_block

status_backup=1
while [ 1 ]
do

	sleep ${period_auto_backup}

	# Update configuration
	source ${curdir}/setup_config

	hour_now=`date +"%H"`

	# Chack manual switch
	flag_manual_switch=1
	[ -e ${file_manual_switch_backup} ] && flag_manual_switch=`cat ${file_manual_switch_backup}`
	[ ${flag_manual_switch} -eq 2 ] && [ ${status_backup} -eq 0 ] && status_backup=1

	# Backup could only be run between 3AM and 5AM
	# or manual enforced at anytime (flag_manual_switch == 2)
	# and can only run once per day (status_backup = 1 --> 2 --> 0)
	if     [ ${flag_manual_switch} -eq 2 ] \
		|| [ ${flag_manual_switch} -eq 1    -a    ${hour_now} -ge 3    -a    ${hour_now} -le 5 ]
	then

		if [ ${status_backup} -ge 1 ]
		then

			# Check main disk space
			space=`df -k | sed '/ /! {N; s/\n//;}' | awk '$1=="'${disk_data}'" {print $4}'`
			# If space is none, meaning ${disk_data} not correct
			if [ "x${space}" == "x" ]
			then
				log "System drive: ${disk_data} not detected."
				continue
			fi
			
			# Continue backup anyway (status 2)
			# or start backup when lower than margin space (status 1)
			if     [ ${status_backup} -eq 2 ] \
				|| [ ${space} -lt ${margin_space} ]	
			then

				# Need for backup

				# Check QSM recon status
				! is_idle && log "QSM recon running. Backup is not allowed" && continue

				# Now we could start/continue the backup
				echo ""
				if [ ${status_backup} -eq 1 ]
				then
					
					# Start new backup
					log "========== Backup initiated =========="

					status_backup=2

				else

					# Continue backup
					log "Continue backup"

				fi


				log "Data folder content:"
				get_folder_size ${folder_data} 1 -h

				# External drive is at end of list
				[ "x${mount_backup_fix}" == "x" ] && mount_backup=`df -k | sed '/ /! {N; s/\n//;}' | tail -n 1 | awk '{print $NF}'`
				[ ! -e ${mount_backup}/data ] && mkdir -p ${mount_backup}/data

				# Get all paths to be copied
				path_copy_list=$(ls -d ${folder_data}/*/*/*/DICOM 2>/dev/null | sed 's|/DICOM||')

				# Check QSM recon status, again (just to be sure)
				! is_idle && log "QSM recon running. Backup is not allowed" && continue



				# Now good to go
				for each_path in ${path_copy_list}
				do

					# Peer found to be copied
					[ ${each_path: -1} == "/" ] && each_path=${each_path::-1}
					parse_path ${each_path} peer_copy exam_copy series_copy
					# log "Now copying ${peer_copy}/${exam_copy}/${series_copy} to ${mount_backup}"

					# Check if there is enough space on the external drive
					space_backup=`df -k | sed '/ /! {N; s/\n//;}' | awk '$NF=="'${mount_backup}'" {print $4}'`
					[ "x${space_backup}" == "x" ] && space_backup="0"
					size_folder=`get_folder_size ${each_path} 0 -k | awk '{ print $1 }'`

					# log "Size of ${AET_peer}: ${size_folder}, Available space_backup ${space_backup}"


					if [ "${space_backup}" -lt "${size_folder}" ]
					then

						# Not enough space for the current folder
						log "No enough space on ${mount_backup}. Stopping backup"
						echo -e "No enough space on ${mount_backup} (size ${space_backup}) for folder ${each_path} (size ${siz_folder})" | mail -s "Backup disk full for Hackintosh" ${email_notice}

						# Stop backup
						status_backup=0

						break

					else

						# Block QSM recon
						! try_block && log "QSM recon running. Backup block failed" && break

						# Copy file over
						#cp -rf ${folder_data}/${AET_peer} ${mount_backup}/data/
						mkdir -p ${mount_backup}/data/${peer_copy}/${exam_copy}/${series_copy}
						rsync -a --remove-source-files ${each_path}/ ${mount_backup}/data/${peer_copy}/${exam_copy}/${series_copy}/

						# Check if folder is empty
						src_file_list=$(find ${each_path} -type f)
						if [ -z "${src_file_list}" ]
						then

							# Folder is empty
							# Transfer succeeded						
							# log "Copying done."

							# Remove series folder
							find ${each_path} -depth -type d -empty -delete

							# Remove empty exam/peer if possible
							rmdir ${folder_data}/${peer_copy}/${exam_copy} 2>/dev/null
							rmdir ${folder_data}/${peer_copy} 2>/dev/null

							log "${peer_copy} ${exam_copy} ${series_copy} archived"

						# else

							# Folder not empty
							# Transfer is not clean (src files being updated during transfer)

							# Do nothing

						fi


						# Release block
						release_block

					fi			

					# Wait
					sleep 6

				done

				# Update all paths to be copied
				path_copy_list=$(ls -d ${folder_data}/*/*/*/DICOM 2>/dev/null | sed 's|/DICOM||')				

				if [ -z "${path_copy_list}" ]
				then

					# No backup needed, or all backup have been successful

				 	space=`df -k | sed '/ /! {N; s/\n//;}' | awk '$1=="'${disk_data}'" {print $4}'`
				 	log "New available space: ${space}"

				 	log "========== Backup finished ==========="

					# Stop backup
					status_backup=0

				fi

			fi

		fi

	else

		status_backup=1

		# Unblock the recon (Just in case)
		release_block

	fi

done
